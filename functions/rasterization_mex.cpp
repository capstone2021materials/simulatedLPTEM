#include<iostream>
#include <cmath>
#include "eigen\Eigen\Dense"
#include "mex.hpp"
#include "mexAdapter.hpp"
using namespace Eigen;
using namespace std;

double triAreaCross(double pa[3], double pb[3],double pc[3]){
	double a[3] = {};
	double b[3] = {};
	for (int i=0;i<3;i++){
		a[i]=pa[i]-pb[i];
		b[i]=pc[i]-pb[i];
	}
	double c[3] = {a[1]*b[2]-a[2]*b[1], a[2]*b[0]-a[0]*b[2], a[0]*b[1]-a[1]*b[0]}; 
    double area=0;
    for (int i=0;i<3;i++){
		area+=pow(c[i],2);
	}
	area=0.5*sqrt(area);
	
	return area;
}


bool ray_mesh_intersection(double mesh[3][3], double p0[3], double u[3], double output[3]){
	
	double I[3]={0,0,0};
	double v0[3]={mesh[0][0],mesh[1][0],mesh[2][0]};
	double v1[3]={mesh[0][1],mesh[1][1],mesh[2][1]};
	double v2[3]={mesh[0][2],mesh[1][2],mesh[2][2]};
	double w[3],N=0,D=0;
	double a[3],b[3];
	
	for (int i=0;i<3;i++){
		w[i]=p0[i]-v0[i];
		a[i]=v1[i]-v0[i];
		b[i]=v2[i]-v1[i];
	}
	
	double n[3] = {a[1]*b[2]-a[2]*b[1], a[2]*b[0]-a[0]*b[2], a[0]*b[1]-a[1]*b[0]}; 
	for (int i=0;i<3;i++){
		D+=n[i]*u[i];
		N-=n[i]*w[i];
	}

	if (abs(D) < pow(10,-7) ) {				//The segment is parallel to plane
		  return 0;
          
    }      

	double sI = N / D;
	for (int i=0;i<3;i++){
		I[i]=p0[i]+sI*u[i];
	}

 	if (sI < 0 ){
 		return 0;
	 }
	
	double I_2d[3]={I[0],I[1],0};
	double v0_2d[3]={mesh[0][0],mesh[1][0],0};
	double v1_2d[3]={mesh[0][1],mesh[1][1],0};
	double v2_2d[3]={mesh[0][2],mesh[1][2],0};
	
	
	double a0=triAreaCross(v0_2d,v1_2d,v2_2d);
	double a1=triAreaCross(I_2d,v1_2d,v2_2d);
	double a2=triAreaCross(v0_2d,I_2d,v2_2d);
	double a3=triAreaCross(v0_2d,v1_2d,I_2d);

if ( (abs(a1+a2+a3-a0)>0.01) || (a0<0.01 ) )
    return 0;

for (int i=0;i<3;i++){
		output[i]=I[i];
	}
return 1;
			
}



int ray_tracing(Matrix3f meshs[], int size, double * output){
	double results[size] = {};
	double u[3]={0,0,1};
	double p0[3]={0,0,-2000};
	double mesh[3][3]={};
	double recive[3]={};
	bool check=0;
	double maxh,minh;
	for(int i=0;i<size;i++){
			maxh=-200000;minh=200000;
			p0[0]=meshs[i/3](0,i%3);
			p0[1]=meshs[i/3](1,i%3);
			printf("%f, %f ",p0[0],p0[1]);
			
			for(int k=0; k<size/3;k++){
				for(int m=0;m<3;m++){
					for(int n=0;n<3;n++){
						mesh[m][n]=meshs[k](m,n);
					}
				}
			    check = ray_mesh_intersection(mesh,p0,u,recive);
			    if(check){
			    	if(recive[2]<minh) minh=recive[2];
			    	if(recive[2]>maxh) maxh=recive[2];
			    	}    
				}
			
			
		if( maxh  > minh ) {
							results[i] = maxh-minh;   
							
						}
		else {
				results[i] = 0;
		}
		printf(", %f\n",results[i]);
		}
	for(int i=0;i<size;i++){
			*(output+i)=results[i];
	}
}
/*
int main(){
	double data[1044]={1.22464679914735e-14,-200,0,1.22464679914735e-14,-200,0,1.22464679914735e-14,-200,0,1.22464679914735e-14,-200,0,1.22464679914735e-14,-200,0,117.557050458495,-161.803398874989,0,117.557050458495,-161.803398874989,0,117.557050458495,-161.803398874989,0,117.557050458495,-161.803398874989,0,117.557050458495,-161.803398874989,0,117.557050458495,-161.803398874989,0,190.211303259031,-61.8033988749895,0,190.211303259031,-61.8033988749895,0,190.211303259031,-61.8033988749895,0,190.211303259031,-61.8033988749895,0,190.211303259031,61.8033988749895,0,190.211303259031,61.8033988749895,0,117.557050458495,161.803398874989,0,117.557050458495,161.803398874989,0,117.557050458495,161.803398874989,0,117.557050458495,161.803398874989,0,117.557050458495,161.803398874989,0,117.557050458495,161.803398874989,0,1.22464679914735e-14,200,0,1.22464679914735e-14,200,0,1.22464679914735e-14,200,0,9.90760072617092e-15,-200,7.19829327805997e-15,9.90760072617092e-15,-200,7.19829327805997e-15,95.1056516295154,-161.803398874989,69.0983005625053,153.884176858763,-61.8033988749895,111.803398874989,153.884176858763,-61.8033988749895,111.803398874989,153.884176858763,-61.8033988749895,111.803398874989,153.884176858763,61.8033988749895,111.803398874989,153.884176858763,61.8033988749895,111.803398874989,95.1056516295154,161.803398874989,69.0983005625053,9.90760072617092e-15,200,7.19829327805997e-15,3.78436673043415e-15,-200,1.16470831848909e-14,3.78436673043415e-15,-200,1.16470831848909e-14,3.78436673043415e-15,-200,1.16470831848909e-14,36.3271264002680,-161.803398874989,111.803398874989,36.3271264002680,-161.803398874989,111.803398874989,58.7785252292473,-61.8033988749895,180.901699437495,58.7785252292473,-61.8033988749895,180.901699437495,58.7785252292473,61.8033988749895,180.901699437495,36.3271264002680,161.803398874989,111.803398874989,36.3271264002680,161.803398874989,111.803398874989,3.78436673043415e-15,200,1.16470831848909e-14,3.78436673043415e-15,200,1.16470831848909e-14,-3.78436673043415e-15,-200,1.16470831848909e-14,-3.78436673043415e-15,-200,1.16470831848909e-14,-3.78436673043415e-15,-200,1.16470831848909e-14,-3.78436673043415e-15,-200,1.16470831848909e-14,-36.3271264002680,-161.803398874989,111.803398874989,-36.3271264002680,-161.803398874989,111.803398874989,-36.3271264002680,-161.803398874989,111.803398874989,-58.7785252292473,-61.8033988749895,180.901699437495,-58.7785252292473,-61.8033988749895,180.901699437495,-58.7785252292473,61.8033988749895,180.901699437495,-36.3271264002680,161.803398874989,111.803398874989,-36.3271264002680,161.803398874989,111.803398874989,-36.3271264002680,161.803398874989,111.803398874989,-3.78436673043415e-15,200,1.16470831848909e-14,-3.78436673043415e-15,200,1.16470831848909e-14,-3.78436673043415e-15,200,1.16470831848909e-14,-9.90760072617092e-15,-200,7.19829327805997e-15,-9.90760072617092e-15,-200,7.19829327805997e-15,-95.1056516295154,-161.803398874989,69.0983005625053,-153.884176858763,-61.8033988749895,111.803398874989,-153.884176858763,-61.8033988749895,111.803398874989,-153.884176858763,-61.8033988749895,111.803398874989,-153.884176858763,61.8033988749895,111.803398874989,-153.884176858763,61.8033988749895,111.803398874989,-95.1056516295154,161.803398874989,69.0983005625053,-9.90760072617092e-15,200,7.19829327805997e-15,-1.22464679914735e-14,-200,0,-1.22464679914735e-14,-200,0,-117.557050458495,-161.803398874989,0,-117.557050458495,-161.803398874989,0,-117.557050458495,-161.803398874989,0,-190.211303259031,-61.8033988749895,0,-190.211303259031,61.8033988749895,0,-190.211303259031,61.8033988749895,0,-117.557050458495,161.803398874989,0,-117.557050458495,161.803398874989,0,-117.557050458495,161.803398874989,0,-1.22464679914735e-14,200,0,-9.90760072617092e-15,-200,-7.19829327805997e-15,-9.90760072617092e-15,-200,-7.19829327805997e-15,-95.1056516295154,-161.803398874989,-69.0983005625053,-153.884176858763,-61.8033988749895,-111.803398874989,-153.884176858763,-61.8033988749895,-111.803398874989,-153.884176858763,61.8033988749895,-111.803398874989,-153.884176858763,61.8033988749895,-111.803398874989,-153.884176858763,61.8033988749895,-111.803398874989,-95.1056516295154,161.803398874989,-69.0983005625053,-9.90760072617092e-15,200,-7.19829327805997e-15,-3.78436673043415e-15,-200,-1.16470831848909e-14,-36.3271264002680,-161.803398874989,-111.803398874989,-36.3271264002680,-161.803398874989,-111.803398874989,-58.7785252292473,-61.8033988749895,-180.901699437495,-58.7785252292473,-61.8033988749895,-180.901699437495,-58.7785252292473,61.8033988749895,-180.901699437495,-58.7785252292473,61.8033988749895,-180.901699437495,-58.7785252292473,61.8033988749895,-180.901699437495,-36.3271264002680,161.803398874989,-111.803398874989,-36.3271264002680,161.803398874989,-111.803398874989,3.78436673043415e-15,-200,-1.16470831848909e-14,36.3271264002680,-161.803398874989,-111.803398874989,36.3271264002680,-161.803398874989,-111.803398874989,36.3271264002680,-161.803398874989,-111.803398874989,58.7785252292473,-61.8033988749895,-180.901699437495,58.7785252292473,61.8033988749895,-180.901699437495,58.7785252292473,61.8033988749895,-180.901699437495,36.3271264002680,161.803398874989,-111.803398874989,36.3271264002680,161.803398874989,-111.803398874989,36.3271264002680,161.803398874989,-111.803398874989,117.557050458495,-161.803398874989,0,9.90760072617092e-15,-200,7.19829327805997e-15,3.78436673043415e-15,-200,1.16470831848909e-14,3.78436673043415e-15,-200,-1.16470831848909e-14,9.90760072617092e-15,-200,-7.19829327805997e-15,190.211303259031,-61.8033988749895,0,95.1056516295154,-161.803398874989,69.0983005625053,153.884176858763,-61.8033988749895,111.803398874989,9.90760072617092e-15,-200,-7.19829327805997e-15,95.1056516295154,-161.803398874989,-69.0983005625053,153.884176858763,-61.8033988749895,-111.803398874989,190.211303259031,61.8033988749895,0,153.884176858763,61.8033988749895,111.803398874989,153.884176858763,-61.8033988749895,-111.803398874989,153.884176858763,61.8033988749895,-111.803398874989,117.557050458495,161.803398874989,0,153.884176858763,61.8033988749895,-111.803398874989,1.22464679914735e-14,200,0,95.1056516295154,161.803398874989,69.0983005625053,9.90760072617092e-15,200,7.19829327805997e-15,153.884176858763,61.8033988749895,-111.803398874989,95.1056516295154,161.803398874989,-69.0983005625053,9.90760072617092e-15,200,-7.19829327805997e-15,3.78436673043415e-15,200,1.16470831848909e-14,3.78436673043415e-15,200,-1.16470831848909e-14,9.90760072617092e-15,200,-7.19829327805997e-15,95.1056516295154,-161.803398874989,69.0983005625053,36.3271264002680,-161.803398874989,111.803398874989,153.884176858763,-61.8033988749895,111.803398874989,153.884176858763,61.8033988749895,111.803398874989,58.7785252292473,-61.8033988749895,180.901699437495,58.7785252292473,61.8033988749895,180.901699437495,95.1056516295154,161.803398874989,69.0983005625053,36.3271264002680,161.803398874989,111.803398874989,9.90760072617092e-15,200,7.19829327805997e-15,3.78436673043415e-15,200,1.16470831848909e-14,36.3271264002680,-161.803398874989,111.803398874989,-3.78436673043415e-15,-200,1.16470831848909e-14,-36.3271264002680,-161.803398874989,111.803398874989,58.7785252292473,-61.8033988749895,180.901699437495,-58.7785252292473,-61.8033988749895,180.901699437495,58.7785252292473,61.8033988749895,180.901699437495,-58.7785252292473,61.8033988749895,180.901699437495,36.3271264002680,161.803398874989,111.803398874989,3.78436673043415e-15,200,1.16470831848909e-14,-36.3271264002680,161.803398874989,111.803398874989,-3.78436673043415e-15,200,1.16470831848909e-14,3.78436673043415e-15,200,-1.16470831848909e-14,-36.3271264002680,-161.803398874989,111.803398874989,-9.90760072617092e-15,-200,7.19829327805997e-15,-1.22464679914735e-14,-200,0,-3.78436673043415e-15,-200,-1.16470831848909e-14,-58.7785252292473,-61.8033988749895,180.901699437495,-95.1056516295154,-161.803398874989,69.0983005625053,-153.884176858763,-61.8033988749895,111.803398874989,-58.7785252292473,61.8033988749895,180.901699437495,-153.884176858763,61.8033988749895,111.803398874989,-36.3271264002680,161.803398874989,111.803398874989,-3.78436673043415e-15,200,1.16470831848909e-14,-95.1056516295154,161.803398874989,69.0983005625053,-9.90760072617092e-15,200,7.19829327805997e-15,-1.22464679914735e-14,200,0,-3.78436673043415e-15,200,-1.16470831848909e-14,3.78436673043415e-15,200,-1.16470831848909e-14,-95.1056516295154,-161.803398874989,69.0983005625053,-117.557050458495,-161.803398874989,0,-153.884176858763,-61.8033988749895,111.803398874989,-153.884176858763,61.8033988749895,111.803398874989,-190.211303259031,-61.8033988749895,0,-190.211303259031,61.8033988749895,0,-95.1056516295154,161.803398874989,69.0983005625053,-117.557050458495,161.803398874989,0,-9.90760072617092e-15,200,7.19829327805997e-15,-1.22464679914735e-14,200,0,-117.557050458495,-161.803398874989,0,-9.90760072617092e-15,-200,-7.19829327805997e-15,-190.211303259031,-61.8033988749895,0,-95.1056516295154,-161.803398874989,-69.0983005625053,-153.884176858763,-61.8033988749895,-111.803398874989,-190.211303259031,61.8033988749895,0,-117.557050458495,161.803398874989,0,-153.884176858763,61.8033988749895,-111.803398874989,-1.22464679914735e-14,200,0,-95.1056516295154,161.803398874989,-69.0983005625053,-9.90760072617092e-15,200,-7.19829327805997e-15,-3.78436673043415e-15,200,-1.16470831848909e-14,-95.1056516295154,-161.803398874989,-69.0983005625053,-36.3271264002680,-161.803398874989,-111.803398874989,-153.884176858763,-61.8033988749895,-111.803398874989,-153.884176858763,61.8033988749895,-111.803398874989,-58.7785252292473,-61.8033988749895,-180.901699437495,-95.1056516295154,161.803398874989,-69.0983005625053,-58.7785252292473,61.8033988749895,-180.901699437495,-36.3271264002680,161.803398874989,-111.803398874989,-9.90760072617092e-15,200,-7.19829327805997e-15,-3.78436673043415e-15,200,-1.16470831848909e-14,-36.3271264002680,-161.803398874989,-111.803398874989,-58.7785252292473,-61.8033988749895,-180.901699437495,36.3271264002680,-161.803398874989,-111.803398874989,-58.7785252292473,61.8033988749895,-180.901699437495,58.7785252292473,-61.8033988749895,-180.901699437495,-36.3271264002680,161.803398874989,-111.803398874989,58.7785252292473,61.8033988749895,-180.901699437495,36.3271264002680,161.803398874989,-111.803398874989,-3.78436673043415e-15,200,-1.16470831848909e-14,3.78436673043415e-15,200,-1.16470831848909e-14,36.3271264002680,-161.803398874989,-111.803398874989,58.7785252292473,-61.8033988749895,-180.901699437495,95.1056516295154,-161.803398874989,-69.0983005625053,153.884176858763,-61.8033988749895,-111.803398874989,58.7785252292473,61.8033988749895,-180.901699437495,36.3271264002680,161.803398874989,-111.803398874989,153.884176858763,61.8033988749895,-111.803398874989,3.78436673043415e-15,200,-1.16470831848909e-14,95.1056516295154,161.803398874989,-69.0983005625053,9.90760072617092e-15,200,-7.19829327805997e-15,9.90760072617092e-15,-200,7.19829327805997e-15,3.78436673043415e-15,-200,1.16470831848909e-14,3.78436673043415e-15,-200,-1.16470831848909e-14,9.90760072617092e-15,-200,-7.19829327805997e-15,117.557050458495,-161.803398874989,0,153.884176858763,-61.8033988749895,111.803398874989,9.90760072617092e-15,-200,7.19829327805997e-15,95.1056516295154,-161.803398874989,69.0983005625053,95.1056516295154,-161.803398874989,-69.0983005625053,153.884176858763,-61.8033988749895,-111.803398874989,190.211303259031,-61.8033988749895,0,153.884176858763,61.8033988749895,111.803398874989,153.884176858763,-61.8033988749895,111.803398874989,153.884176858763,61.8033988749895,-111.803398874989,190.211303259031,61.8033988749895,0,153.884176858763,61.8033988749895,111.803398874989,117.557050458495,161.803398874989,0,9.90760072617092e-15,200,7.19829327805997e-15,153.884176858763,61.8033988749895,111.803398874989,95.1056516295154,161.803398874989,69.0983005625053,95.1056516295154,161.803398874989,-69.0983005625053,9.90760072617092e-15,200,-7.19829327805997e-15,1.22464679914735e-14,200,0,9.90760072617092e-15,200,7.19829327805997e-15,3.78436673043415e-15,200,1.16470831848909e-14,3.78436673043415e-15,200,-1.16470831848909e-14,36.3271264002680,-161.803398874989,111.803398874989,3.78436673043415e-15,-200,1.16470831848909e-14,36.3271264002680,-161.803398874989,111.803398874989,58.7785252292473,61.8033988749895,180.901699437495,36.3271264002680,-161.803398874989,111.803398874989,58.7785252292473,-61.8033988749895,180.901699437495,36.3271264002680,161.803398874989,111.803398874989,58.7785252292473,61.8033988749895,180.901699437495,36.3271264002680,161.803398874989,111.803398874989,36.3271264002680,161.803398874989,111.803398874989,-36.3271264002680,-161.803398874989,111.803398874989,3.78436673043415e-15,-200,-1.16470831848909e-14,-3.78436673043415e-15,-200,1.16470831848909e-14,-58.7785252292473,-61.8033988749895,180.901699437495,-36.3271264002680,-161.803398874989,111.803398874989,-58.7785252292473,61.8033988749895,180.901699437495,-58.7785252292473,-61.8033988749895,180.901699437495,-58.7785252292473,61.8033988749895,180.901699437495,-36.3271264002680,161.803398874989,111.803398874989,-58.7785252292473,61.8033988749895,180.901699437495,-36.3271264002680,161.803398874989,111.803398874989,-3.78436673043415e-15,200,1.16470831848909e-14,-9.90760072617092e-15,-200,7.19829327805997e-15,-1.22464679914735e-14,-200,0,-3.78436673043415e-15,-200,-1.16470831848909e-14,3.78436673043415e-15,-200,-1.16470831848909e-14,-153.884176858763,-61.8033988749895,111.803398874989,-9.90760072617092e-15,-200,7.19829327805997e-15,-95.1056516295154,-161.803398874989,69.0983005625053,-153.884176858763,61.8033988749895,111.803398874989,-153.884176858763,-61.8033988749895,111.803398874989,-153.884176858763,61.8033988749895,111.803398874989,-9.90760072617092e-15,200,7.19829327805997e-15,-153.884176858763,61.8033988749895,111.803398874989,-95.1056516295154,161.803398874989,69.0983005625053,-9.90760072617092e-15,200,7.19829327805997e-15,-1.22464679914735e-14,200,0,-3.78436673043415e-15,200,-1.16470831848909e-14,-117.557050458495,-161.803398874989,0,-1.22464679914735e-14,-200,0,-117.557050458495,-161.803398874989,0,-190.211303259031,61.8033988749895,0,-117.557050458495,-161.803398874989,0,-190.211303259031,-61.8033988749895,0,-117.557050458495,161.803398874989,0,-190.211303259031,61.8033988749895,0,-117.557050458495,161.803398874989,0,-117.557050458495,161.803398874989,0,-9.90760072617092e-15,-200,-7.19829327805997e-15,-3.78436673043415e-15,-200,-1.16470831848909e-14,-153.884176858763,-61.8033988749895,-111.803398874989,-9.90760072617092e-15,-200,-7.19829327805997e-15,-95.1056516295154,-161.803398874989,-69.0983005625053,-153.884176858763,-61.8033988749895,-111.803398874989,-153.884176858763,61.8033988749895,-111.803398874989,-153.884176858763,-61.8033988749895,-111.803398874989,-9.90760072617092e-15,200,-7.19829327805997e-15,-153.884176858763,61.8033988749895,-111.803398874989,-95.1056516295154,161.803398874989,-69.0983005625053,-9.90760072617092e-15,200,-7.19829327805997e-15,-36.3271264002680,-161.803398874989,-111.803398874989,-3.78436673043415e-15,-200,-1.16470831848909e-14,-36.3271264002680,-161.803398874989,-111.803398874989,-58.7785252292473,-61.8033988749895,-180.901699437495,-36.3271264002680,-161.803398874989,-111.803398874989,-36.3271264002680,161.803398874989,-111.803398874989,-58.7785252292473,-61.8033988749895,-180.901699437495,-58.7785252292473,61.8033988749895,-180.901699437495,-36.3271264002680,161.803398874989,-111.803398874989,-36.3271264002680,161.803398874989,-111.803398874989,3.78436673043415e-15,-200,-1.16470831848909e-14,36.3271264002680,-161.803398874989,-111.803398874989,3.78436673043415e-15,-200,-1.16470831848909e-14,58.7785252292473,-61.8033988749895,-180.901699437495,36.3271264002680,-161.803398874989,-111.803398874989,36.3271264002680,161.803398874989,-111.803398874989,58.7785252292473,-61.8033988749895,-180.901699437495,58.7785252292473,61.8033988749895,-180.901699437495,3.78436673043415e-15,200,-1.16470831848909e-14,36.3271264002680,161.803398874989,-111.803398874989,9.90760072617092e-15,-200,-7.19829327805997e-15,153.884176858763,-61.8033988749895,-111.803398874989,9.90760072617092e-15,-200,-7.19829327805997e-15,95.1056516295154,-161.803398874989,-69.0983005625053,153.884176858763,-61.8033988749895,-111.803398874989,153.884176858763,61.8033988749895,-111.803398874989,153.884176858763,-61.8033988749895,-111.803398874989,9.90760072617092e-15,200,-7.19829327805997e-15,153.884176858763,61.8033988749895,-111.803398874989,95.1056516295154,161.803398874989,-69.0983005625053};
	int size=(int) (sizeof(data)/sizeof(double))/9;
	int points = size*3;
	//printf("%d",size);
	Matrix3f meshs[size];
	int n=0;
	for (int i=0;i<size;i++){
		for(int j=0;j<3;j++){
			for(int k=0;k<3;k++){
				meshs[i](k,j)=data[n];
				//printf("%f",meshs[i](k,j));
				//printf(", ");
				n++;
			}
			//printf("\n");
		}
	//printf(">>>>>>>>>>>\n");
	}

double results[points] = {};
ray_tracing(meshs,points,&results[0]);
	for(int i=0;i<points;i++){
			//printf("%f \n",results[i]);
			}
	
}
*/
class MexFunction : public matlab::mex::Function {
matlab::data::ArrayFactory factory;
public:
    void operator()(matlab::mex::ArgumentList outputs, matlab::mex::ArgumentList inputs) {
	int(size);
	int n=0;
	matlab::data::TypedArray<double> inArray = inputs[0];
	size=(int)(inArray.getDimensions()[1])/9;
	int points = size*3;
    Matrix3f meshs[size];
	matlab::data::TypedArray<double> outArray=factory.createArray<double>({points});
	for (int i=0;i<size;i++){
		for(int j=0;j<3;j++){
			for(int k=0;k<3;k++){
				meshs[i](k,j)=inArray[n];
				n++;
			}
		}
	
	}
	
double results[points] = {};
ray_tracing(meshs,points,&results[0]);
	for(int i=0;i<points;i++){
			outArray[i]=results[i];
			}

	outputs[0]=outArray;
	}
};

